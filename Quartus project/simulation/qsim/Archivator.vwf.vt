// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2022 12:19:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ARCHIVATOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ARCHIVATOR_vlg_sample_tst(
	bit_in,
	clk,
	en,
	nreset,
	rdclk,
	read,
	readclk,
	sampler_tx
);
input [15:0] bit_in;
input  clk;
input  en;
input  nreset;
input  rdclk;
input  read;
input  readclk;
output sampler_tx;

reg sample;
time current_time;
always @(bit_in or clk or en or nreset or rdclk or read or readclk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ARCHIVATOR_vlg_check_tst (
	byte_out,
	CBUF_overflow,
	FIFO_EMPTY,
	FIFO_FULL,
	ready,
	sampler_rx
);
input [7:0] byte_out;
input  CBUF_overflow;
input  FIFO_EMPTY;
input  FIFO_FULL;
input  ready;
input sampler_rx;

reg [7:0] byte_out_expected;
reg  CBUF_overflow_expected;
reg  FIFO_EMPTY_expected;
reg  FIFO_FULL_expected;
reg  ready_expected;

reg [7:0] byte_out_prev;
reg  CBUF_overflow_prev;
reg  FIFO_EMPTY_prev;
reg  FIFO_FULL_prev;
reg  ready_prev;

reg [7:0] byte_out_expected_prev;
reg  CBUF_overflow_expected_prev;
reg  FIFO_EMPTY_expected_prev;
reg  FIFO_FULL_expected_prev;
reg  ready_expected_prev;

reg [7:0] last_byte_out_exp;
reg  last_CBUF_overflow_exp;
reg  last_FIFO_EMPTY_exp;
reg  last_FIFO_FULL_exp;
reg  last_ready_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	byte_out_prev = byte_out;
	CBUF_overflow_prev = CBUF_overflow;
	FIFO_EMPTY_prev = FIFO_EMPTY;
	FIFO_FULL_prev = FIFO_FULL;
	ready_prev = ready;
end

// update expected /o prevs

always @(trigger)
begin
	byte_out_expected_prev = byte_out_expected;
	CBUF_overflow_expected_prev = CBUF_overflow_expected;
	FIFO_EMPTY_expected_prev = FIFO_EMPTY_expected;
	FIFO_FULL_expected_prev = FIFO_FULL_expected;
	ready_expected_prev = ready_expected;
end


// expected byte_out[ 7 ]
initial
begin
	byte_out_expected[7] = 1'bX;
end 
// expected byte_out[ 6 ]
initial
begin
	byte_out_expected[6] = 1'bX;
end 
// expected byte_out[ 5 ]
initial
begin
	byte_out_expected[5] = 1'bX;
end 
// expected byte_out[ 4 ]
initial
begin
	byte_out_expected[4] = 1'bX;
end 
// expected byte_out[ 3 ]
initial
begin
	byte_out_expected[3] = 1'bX;
end 
// expected byte_out[ 2 ]
initial
begin
	byte_out_expected[2] = 1'bX;
end 
// expected byte_out[ 1 ]
initial
begin
	byte_out_expected[1] = 1'bX;
end 
// expected byte_out[ 0 ]
initial
begin
	byte_out_expected[0] = 1'bX;
end 

// expected CBUF_overflow
initial
begin
	CBUF_overflow_expected = 1'bX;
end 

// expected FIFO_EMPTY
initial
begin
	FIFO_EMPTY_expected = 1'bX;
end 

// expected FIFO_FULL
initial
begin
	FIFO_FULL_expected = 1'bX;
end 

// expected ready
initial
begin
	ready_expected = 1'bX;
end 
// generate trigger
always @(byte_out_expected or byte_out or CBUF_overflow_expected or CBUF_overflow or FIFO_EMPTY_expected or FIFO_EMPTY or FIFO_FULL_expected or FIFO_FULL or ready_expected or ready)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected byte_out = %b | expected CBUF_overflow = %b | expected FIFO_EMPTY = %b | expected FIFO_FULL = %b | expected ready = %b | ",byte_out_expected_prev,CBUF_overflow_expected_prev,FIFO_EMPTY_expected_prev,FIFO_FULL_expected_prev,ready_expected_prev);
	$display("| real byte_out = %b | real CBUF_overflow = %b | real FIFO_EMPTY = %b | real FIFO_FULL = %b | real ready = %b | ",byte_out_prev,CBUF_overflow_prev,FIFO_EMPTY_prev,FIFO_FULL_prev,ready_prev);
`endif
	if (
		( byte_out_expected_prev[0] !== 1'bx ) && ( byte_out_prev[0] !== byte_out_expected_prev[0] )
		&& ((byte_out_expected_prev[0] !== last_byte_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[0] = byte_out_expected_prev[0];
	end
	if (
		( byte_out_expected_prev[1] !== 1'bx ) && ( byte_out_prev[1] !== byte_out_expected_prev[1] )
		&& ((byte_out_expected_prev[1] !== last_byte_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[1] = byte_out_expected_prev[1];
	end
	if (
		( byte_out_expected_prev[2] !== 1'bx ) && ( byte_out_prev[2] !== byte_out_expected_prev[2] )
		&& ((byte_out_expected_prev[2] !== last_byte_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[2] = byte_out_expected_prev[2];
	end
	if (
		( byte_out_expected_prev[3] !== 1'bx ) && ( byte_out_prev[3] !== byte_out_expected_prev[3] )
		&& ((byte_out_expected_prev[3] !== last_byte_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[3] = byte_out_expected_prev[3];
	end
	if (
		( byte_out_expected_prev[4] !== 1'bx ) && ( byte_out_prev[4] !== byte_out_expected_prev[4] )
		&& ((byte_out_expected_prev[4] !== last_byte_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[4] = byte_out_expected_prev[4];
	end
	if (
		( byte_out_expected_prev[5] !== 1'bx ) && ( byte_out_prev[5] !== byte_out_expected_prev[5] )
		&& ((byte_out_expected_prev[5] !== last_byte_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[5] = byte_out_expected_prev[5];
	end
	if (
		( byte_out_expected_prev[6] !== 1'bx ) && ( byte_out_prev[6] !== byte_out_expected_prev[6] )
		&& ((byte_out_expected_prev[6] !== last_byte_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[6] = byte_out_expected_prev[6];
	end
	if (
		( byte_out_expected_prev[7] !== 1'bx ) && ( byte_out_prev[7] !== byte_out_expected_prev[7] )
		&& ((byte_out_expected_prev[7] !== last_byte_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byte_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byte_out_expected_prev);
		$display ("     Real value = %b", byte_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_byte_out_exp[7] = byte_out_expected_prev[7];
	end
	if (
		( CBUF_overflow_expected_prev !== 1'bx ) && ( CBUF_overflow_prev !== CBUF_overflow_expected_prev )
		&& ((CBUF_overflow_expected_prev !== last_CBUF_overflow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CBUF_overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CBUF_overflow_expected_prev);
		$display ("     Real value = %b", CBUF_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CBUF_overflow_exp = CBUF_overflow_expected_prev;
	end
	if (
		( FIFO_EMPTY_expected_prev !== 1'bx ) && ( FIFO_EMPTY_prev !== FIFO_EMPTY_expected_prev )
		&& ((FIFO_EMPTY_expected_prev !== last_FIFO_EMPTY_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_EMPTY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_EMPTY_expected_prev);
		$display ("     Real value = %b", FIFO_EMPTY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FIFO_EMPTY_exp = FIFO_EMPTY_expected_prev;
	end
	if (
		( FIFO_FULL_expected_prev !== 1'bx ) && ( FIFO_FULL_prev !== FIFO_FULL_expected_prev )
		&& ((FIFO_FULL_expected_prev !== last_FIFO_FULL_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_FULL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_FULL_expected_prev);
		$display ("     Real value = %b", FIFO_FULL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_FIFO_FULL_exp = FIFO_FULL_expected_prev;
	end
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ARCHIVATOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] bit_in;
reg clk;
reg en;
reg nreset;
reg rdclk;
reg read;
reg readclk;
// wires                                               
wire [7:0] byte_out;
wire CBUF_overflow;
wire FIFO_EMPTY;
wire FIFO_FULL;
wire ready;

wire sampler;                             

// assign statements (if any)                          
ARCHIVATOR i1 (
// port map - connection between master ports and signals/registers   
	.bit_in(bit_in),
	.byte_out(byte_out),
	.CBUF_overflow(CBUF_overflow),
	.clk(clk),
	.en(en),
	.FIFO_EMPTY(FIFO_EMPTY),
	.FIFO_FULL(FIFO_FULL),
	.nreset(nreset),
	.rdclk(rdclk),
	.read(read),
	.readclk(readclk),
	.ready(ready)
);

// en
initial
begin
	en = 1'b1;
end 

// nreset
initial
begin
	nreset = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// read
initial
begin
	read = 1'b1;
end 

// rdclk
always
begin
	rdclk = 1'b0;
	rdclk = #50 1'b1;
	#50;
end 

// readclk
always
begin
	readclk = 1'b0;
	readclk = #50000 1'b1;
	#50000;
end 
// bit_in[ 15 ]
always
begin
	bit_in[15] = 1'b0;
	bit_in[15] = #50000 1'b1;
	#50000;
end 
// bit_in[ 14 ]
always
begin
	bit_in[14] = 1'b0;
	bit_in[14] = #50000 1'b1;
	#50000;
end 
// bit_in[ 13 ]
always
begin
	bit_in[13] = 1'b0;
	bit_in[13] = #50000 1'b1;
	#50000;
end 
// bit_in[ 12 ]
always
begin
	bit_in[12] = 1'b0;
	bit_in[12] = #50000 1'b1;
	#50000;
end 
// bit_in[ 11 ]
always
begin
	bit_in[11] = 1'b0;
	bit_in[11] = #50000 1'b1;
	#50000;
end 
// bit_in[ 10 ]
always
begin
	bit_in[10] = 1'b0;
	bit_in[10] = #50000 1'b1;
	#50000;
end 
// bit_in[ 9 ]
always
begin
	bit_in[9] = 1'b0;
	bit_in[9] = #50000 1'b1;
	#50000;
end 
// bit_in[ 8 ]
always
begin
	bit_in[8] = 1'b0;
	bit_in[8] = #50000 1'b1;
	#50000;
end 
// bit_in[ 7 ]
always
begin
	bit_in[7] = 1'b0;
	bit_in[7] = #50000 1'b1;
	#50000;
end 
// bit_in[ 6 ]
always
begin
	bit_in[6] = 1'b0;
	bit_in[6] = #50000 1'b1;
	#50000;
end 
// bit_in[ 5 ]
always
begin
	bit_in[5] = 1'b0;
	bit_in[5] = #50000 1'b1;
	#50000;
end 
// bit_in[ 4 ]
always
begin
	bit_in[4] = 1'b0;
	bit_in[4] = #50000 1'b1;
	#50000;
end 
// bit_in[ 3 ]
always
begin
	bit_in[3] = 1'b0;
	bit_in[3] = #50000 1'b1;
	#50000;
end 
// bit_in[ 2 ]
always
begin
	bit_in[2] = 1'b0;
	bit_in[2] = #50000 1'b1;
	#50000;
end 
// bit_in[ 1 ]
always
begin
	bit_in[1] = 1'b0;
	bit_in[1] = #50000 1'b1;
	#50000;
end 
// bit_in[ 0 ]
always
begin
	bit_in[0] = 1'b0;
	bit_in[0] = #50000 1'b1;
	#50000;
end 

ARCHIVATOR_vlg_sample_tst tb_sample (
	.bit_in(bit_in),
	.clk(clk),
	.en(en),
	.nreset(nreset),
	.rdclk(rdclk),
	.read(read),
	.readclk(readclk),
	.sampler_tx(sampler)
);

ARCHIVATOR_vlg_check_tst tb_out(
	.byte_out(byte_out),
	.CBUF_overflow(CBUF_overflow),
	.FIFO_EMPTY(FIFO_EMPTY),
	.FIFO_FULL(FIFO_FULL),
	.ready(ready),
	.sampler_rx(sampler)
);
endmodule

