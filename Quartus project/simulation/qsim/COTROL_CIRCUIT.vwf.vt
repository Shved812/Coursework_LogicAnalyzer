// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2022 17:08:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    COTROL_CIRCUIT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module COTROL_CIRCUIT_vlg_sample_tst(
	data_rx,
	FIFO_EMPTY,
	FIFO_FULL,
	idle_tx,
	nreset_button,
	rdclk,
	ready_rx,
	start_button,
	sampler_tx
);
input [7:0] data_rx;
input  FIFO_EMPTY;
input  FIFO_FULL;
input  idle_tx;
input  nreset_button;
input  rdclk;
input  ready_rx;
input  start_button;
output sampler_tx;

reg sample;
time current_time;
always @(data_rx or FIFO_EMPTY or FIFO_FULL or idle_tx or nreset_button or rdclk or ready_rx or start_button)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module COTROL_CIRCUIT_vlg_check_tst (
	en,
	Led_0,
	Led_1,
	Led_2,
	Led_3,
	nreset,
	sampler_rx
);
input  en;
input  Led_0;
input  Led_1;
input  Led_2;
input  Led_3;
input  nreset;
input sampler_rx;

reg  en_expected;
reg  Led_0_expected;
reg  Led_1_expected;
reg  Led_2_expected;
reg  Led_3_expected;
reg  nreset_expected;

reg  en_prev;
reg  Led_0_prev;
reg  Led_1_prev;
reg  Led_2_prev;
reg  Led_3_prev;
reg  nreset_prev;

reg  en_expected_prev;
reg  Led_0_expected_prev;
reg  Led_1_expected_prev;
reg  Led_2_expected_prev;
reg  Led_3_expected_prev;
reg  nreset_expected_prev;

reg  last_en_exp;
reg  last_Led_0_exp;
reg  last_Led_1_exp;
reg  last_Led_2_exp;
reg  last_Led_3_exp;
reg  last_nreset_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	en_prev = en;
	Led_0_prev = Led_0;
	Led_1_prev = Led_1;
	Led_2_prev = Led_2;
	Led_3_prev = Led_3;
	nreset_prev = nreset;
end

// update expected /o prevs

always @(trigger)
begin
	en_expected_prev = en_expected;
	Led_0_expected_prev = Led_0_expected;
	Led_1_expected_prev = Led_1_expected;
	Led_2_expected_prev = Led_2_expected;
	Led_3_expected_prev = Led_3_expected;
	nreset_expected_prev = nreset_expected;
end



// expected en
initial
begin
	en_expected = 1'bX;
end 

// expected nreset
initial
begin
	nreset_expected = 1'bX;
end 

// expected Led_0
initial
begin
	Led_0_expected = 1'bX;
end 

// expected Led_1
initial
begin
	Led_1_expected = 1'bX;
end 

// expected Led_2
initial
begin
	Led_2_expected = 1'bX;
end 

// expected Led_3
initial
begin
	Led_3_expected = 1'bX;
end 
// generate trigger
always @(en_expected or en or Led_0_expected or Led_0 or Led_1_expected or Led_1 or Led_2_expected or Led_2 or Led_3_expected or Led_3 or nreset_expected or nreset)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected en = %b | expected Led_0 = %b | expected Led_1 = %b | expected Led_2 = %b | expected Led_3 = %b | expected nreset = %b | ",en_expected_prev,Led_0_expected_prev,Led_1_expected_prev,Led_2_expected_prev,Led_3_expected_prev,nreset_expected_prev);
	$display("| real en = %b | real Led_0 = %b | real Led_1 = %b | real Led_2 = %b | real Led_3 = %b | real nreset = %b | ",en_prev,Led_0_prev,Led_1_prev,Led_2_prev,Led_3_prev,nreset_prev);
`endif
	if (
		( en_expected_prev !== 1'bx ) && ( en_prev !== en_expected_prev )
		&& ((en_expected_prev !== last_en_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_en_exp = en_expected_prev;
	end
	if (
		( Led_0_expected_prev !== 1'bx ) && ( Led_0_prev !== Led_0_expected_prev )
		&& ((Led_0_expected_prev !== last_Led_0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_0_expected_prev);
		$display ("     Real value = %b", Led_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Led_0_exp = Led_0_expected_prev;
	end
	if (
		( Led_1_expected_prev !== 1'bx ) && ( Led_1_prev !== Led_1_expected_prev )
		&& ((Led_1_expected_prev !== last_Led_1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_1_expected_prev);
		$display ("     Real value = %b", Led_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Led_1_exp = Led_1_expected_prev;
	end
	if (
		( Led_2_expected_prev !== 1'bx ) && ( Led_2_prev !== Led_2_expected_prev )
		&& ((Led_2_expected_prev !== last_Led_2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_2_expected_prev);
		$display ("     Real value = %b", Led_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Led_2_exp = Led_2_expected_prev;
	end
	if (
		( Led_3_expected_prev !== 1'bx ) && ( Led_3_prev !== Led_3_expected_prev )
		&& ((Led_3_expected_prev !== last_Led_3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_3_expected_prev);
		$display ("     Real value = %b", Led_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Led_3_exp = Led_3_expected_prev;
	end
	if (
		( nreset_expected_prev !== 1'bx ) && ( nreset_prev !== nreset_expected_prev )
		&& ((nreset_expected_prev !== last_nreset_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nreset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nreset_expected_prev);
		$display ("     Real value = %b", nreset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_nreset_exp = nreset_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module COTROL_CIRCUIT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] data_rx;
reg FIFO_EMPTY;
reg FIFO_FULL;
reg idle_tx;
reg nreset_button;
reg rdclk;
reg ready_rx;
reg start_button;
// wires                                               
wire en;
wire Led_0;
wire Led_1;
wire Led_2;
wire Led_3;
wire nreset;

wire sampler;                             

// assign statements (if any)                          
COTROL_CIRCUIT i1 (
// port map - connection between master ports and signals/registers   
	.data_rx(data_rx),
	.en(en),
	.FIFO_EMPTY(FIFO_EMPTY),
	.FIFO_FULL(FIFO_FULL),
	.idle_tx(idle_tx),
	.Led_0(Led_0),
	.Led_1(Led_1),
	.Led_2(Led_2),
	.Led_3(Led_3),
	.nreset(nreset),
	.nreset_button(nreset_button),
	.rdclk(rdclk),
	.ready_rx(ready_rx),
	.start_button(start_button)
);

// rdclk
always
begin
	rdclk = 1'b0;
	rdclk = #5000 1'b1;
	#5000;
end 
// data_rx[ 7 ]
initial
begin
	data_rx[7] = 1'b1;
end 
// data_rx[ 6 ]
initial
begin
	data_rx[6] = 1'b0;
end 
// data_rx[ 5 ]
initial
begin
	data_rx[5] = 1'b1;
end 
// data_rx[ 4 ]
initial
begin
	data_rx[4] = 1'b0;
end 
// data_rx[ 3 ]
initial
begin
	data_rx[3] = 1'b1;
end 
// data_rx[ 2 ]
initial
begin
	data_rx[2] = 1'b0;
end 
// data_rx[ 1 ]
initial
begin
	data_rx[1] = 1'b1;
end 
// data_rx[ 0 ]
initial
begin
	data_rx[0] = 1'b1;
end 

// ready_rx
initial
begin
	ready_rx = 1'b0;
	ready_rx = #90000 1'b1;
	ready_rx = #30000 1'b0;
	ready_rx = #160000 1'b1;
	ready_rx = #30000 1'b0;
	ready_rx = #50000 1'b1;
	ready_rx = #30000 1'b0;
	ready_rx = #80000 1'b1;
	ready_rx = #30000 1'b0;
end 

// nreset_button
initial
begin
	nreset_button = 1'b1;
	nreset_button = #420000 1'b0;
	nreset_button = #20000 1'b1;
end 

// start_button
initial
begin
	start_button = 1'b1;
	start_button = #520000 1'b0;
	start_button = #30000 1'b1;
	start_button = #30000 1'b0;
	start_button = #30000 1'b1;
	start_button = #30000 1'b0;
	start_button = #30000 1'b1;
end 

// idle_tx
initial
begin
	idle_tx = 1'b0;
	idle_tx = #170000 1'b1;
	idle_tx = #20000 1'b0;
end 

// FIFO_EMPTY
initial
begin
	FIFO_EMPTY = 1'b0;
	FIFO_EMPTY = #200000 1'b1;
	FIFO_EMPTY = #20000 1'b0;
end 

// FIFO_FULL
initial
begin
	FIFO_FULL = 1'b0;
	FIFO_FULL = #230000 1'b1;
	FIFO_FULL = #20000 1'b0;
end 

COTROL_CIRCUIT_vlg_sample_tst tb_sample (
	.data_rx(data_rx),
	.FIFO_EMPTY(FIFO_EMPTY),
	.FIFO_FULL(FIFO_FULL),
	.idle_tx(idle_tx),
	.nreset_button(nreset_button),
	.rdclk(rdclk),
	.ready_rx(ready_rx),
	.start_button(start_button),
	.sampler_tx(sampler)
);

COTROL_CIRCUIT_vlg_check_tst tb_out(
	.en(en),
	.Led_0(Led_0),
	.Led_1(Led_1),
	.Led_2(Led_2),
	.Led_3(Led_3),
	.nreset(nreset),
	.sampler_rx(sampler)
);
endmodule

